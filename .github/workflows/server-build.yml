name: Build and Deploy Server Docker Image

on:
  push:
    branches:
      - master
      - ingress
    paths:
      - 'server/**'
      - 'Dockerfile.server'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for server changes or Dockerfile.server
        id: check_changes
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '^(server/|Dockerfile\.server$)'; then
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          else
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Node.js
        if: steps.check_changes.outputs.changes_detected == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node_modules
        if: steps.check_changes.outputs.changes_detected == 'true'
        uses: actions/cache@v4
        with:
          path: server/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('server/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.check_changes.outputs.changes_detected == 'true'
        working-directory: server
        run: npm ci

      - name: Set up QEMU
        if: steps.check_changes.outputs.changes_detected == 'true'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm

      - name: Set up Docker Buildx
        if: steps.check_changes.outputs.changes_detected == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: steps.check_changes.outputs.changes_detected == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Generate image tag
        if: steps.check_changes.outputs.changes_detected == 'true'
        id: generate_tag
        run: |
          TAG=$(date +'%Y%m%d')-$(git rev-parse --short HEAD)
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        if: steps.check_changes.outputs.changes_detected == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.server
          platforms: linux/arm/v7
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/cloud-computing-server:${{ steps.generate_tag.outputs.tag }}

      - name: Update Server.yaml
        if: steps.check_changes.outputs.changes_detected == 'true'
        run: |
          sed -i "s|image: ${{ secrets.DOCKER_HUB_USERNAME }}/cloud-computing-server:.*|image: ${{ secrets.DOCKER_HUB_USERNAME }}/cloud-computing-server:${{ steps.generate_tag.outputs.tag }}|" k3s/Server.yaml
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add k3s/Server.yaml
          git commit -m "Update server.yaml with new Docker image tag"
          git pull
          git push

      - name: Send notification to Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          MESSAGE="üöÄ *Workflow Notice* üöÄ%0AServer workflow execution is completed and the Server.yaml (K3s manifests) have changes.%0AYou can now trigger the Jenkins build on Master Node.üõ†Ô∏è"
          curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage \
            -d chat_id=${TELEGRAM_CHAT_ID} \
            -d text="$MESSAGE" \
            -d parse_mode=Markdown
